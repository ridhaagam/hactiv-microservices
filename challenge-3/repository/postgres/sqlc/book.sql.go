// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: book.sql

package sqlc

import (
	"context"
)

const addBook = `-- name: AddBook :one
INSERT INTO books (title, author, descr)
VALUES ($1, $2, $3) RETURNING id, title, author, descr, created_at, updated_at, deleted_at
`

type AddBookParams struct {
	Title  string
	Author string
	Descr  string
}

func (q *Queries) AddBook(ctx context.Context, arg AddBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, addBook, arg.Title, arg.Author, arg.Descr)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Descr,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, descr, created_at, updated_at, deleted_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Descr,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, descr, created_at, updated_at, deleted_at FROM books
ORDER BY id DESC
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Descr,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
  set title = $2,
  author = $3,
  descr = $4
WHERE id = $1
`

type UpdateBookParams struct {
	ID     int64
	Title  string
	Author string
	Descr  string
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Descr,
	)
	return err
}
